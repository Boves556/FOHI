import pytest
import json
from dijkstra import dijkstras_shortest_path

# Define test cases
test_cases = [
    ("10.34.52.187", "10.34.52.244", []),
    ("10.34.52.158", "10.34.166.1", ['10.34.52.1', '10.34.250.1', '10.34.166.1']),
    ("10.34.46.25", "10.34.166.228", ['10.34.46.1', '10.34.98.1', '10.34.166.1']),
    ("10.34.209.229", "10.34.166.26", ['10.34.209.1', '10.34.91.1', '10.34.46.1', '10.34.98.1', '10.34.166.1']),
    ("10.34.79.218", "10.34.79.58", []),
    ("10.34.98.184", "10.34.209.6", ['10.34.98.1', '10.34.46.1', '10.34.91.1', '10.34.209.1']),
    ("10.34.91.97", "10.34.46.255", ['10.34.91.1', '10.34.46.1']),
    ("10.34.79.99", "10.34.46.205", ['10.34.79.1', '10.34.91.1', '10.34.46.1']),
    ("10.34.52.23", "10.34.46.130", ['10.34.52.1', '10.34.53.1', '10.34.194.1', '10.34.46.1']),
    ("10.34.250.228", "10.34.52.119", ['10.34.250.1', '10.34.52.1']),
    ("10.34.209.189", "10.34.91.120", ['10.34.209.1', '10.34.91.1']),
    ("10.34.194.188", "10.34.91.252", ['10.34.194.1', '10.34.46.1', '10.34.91.1']),
    ("10.34.250.213", "10.34.91.184", ['10.34.250.1', '10.34.166.1', '10.34.98.1', '10.34.46.1', '10.34.91.1']),
    ("10.34.52.60", "10.34.46.125", ['10.34.52.1', '10.34.53.1', '10.34.194.1', '10.34.46.1']),
    ("10.34.52.118", "10.34.91.55", ['10.34.52.1', '10.34.53.1', '10.34.194.1', '10.34.46.1', '10.34.91.1']),
    ("10.34.91.68", "10.34.79.122", ['10.34.91.1', '10.34.209.1', '10.34.79.1']),
    ("10.34.250.234", "10.34.46.73", ['10.34.250.1', '10.34.166.1', '10.34.98.1', '10.34.46.1']),
    ("10.34.91.205", "10.34.53.190", ['10.34.91.1', '10.34.46.1', '10.34.194.1', '10.34.53.1']),
    ("10.34.98.33", "10.34.166.170", ['10.34.98.1', '10.34.166.1']),
    ("10.34.79.81", "10.34.46.142", ['10.34.79.1', '10.34.91.1', '10.34.46.1'])
]

with open("example1.json", "r") as f:
    data = json.load(f)
    routers = data['routers']

# Define test function
@pytest.mark.parametrize("source_ip, destination_ip, intermediaries", test_cases)
def test_communication_flow(source_ip, destination_ip, intermediaries):
    # Here you can perform assertions based on your requirements
    assert dijkstras_shortest_path(routers, source_ip, destination_ip) == intermediaries

# Run tests
if __name__ == "__main__":
    pytest.main()
